import os
import numpy as np
import tempfile, zipfile
import torch
import torch.nn as nn
import torch.nn.functional as F
try:
    import torchvision
    import torchaudio
except:
    pass

class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()

        self.conv2d_1 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=3, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_2 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_3 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_4 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=16, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_5 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=16, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_6 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=96, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_7 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_8 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_9 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_10 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_11 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_12 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_13 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_14 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_15 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_16 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_17 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_18 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_19 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_20 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_21 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=384, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_22 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(3,3), out_channels=512, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_23 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_24 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_25 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_26 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_27 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_28 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_29 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_30 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_31 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=768, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_32 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_33 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=1024, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_34 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_35 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_36 = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_37 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_38 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_39 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_40 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_41 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=768, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_42 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_43 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_44 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=384, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_45 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_46 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_47 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_48 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=192, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_49 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_50 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_51 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_52 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_53 = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv_transpose2d_0 = nn.ConvTranspose2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(2,2), out_channels=128, output_padding=(0,0), padding=(0,0), stride=(2,2))
        self.conv2d_54 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_55 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_56 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_57 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=384, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_58 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_59 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_60 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_61 = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_62 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_63 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_64 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_65 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_67 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=384, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_68 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(2,2))
        self.conv2d_69 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_70 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_71 = nn.Conv2d(bias=True, dilation=(1,1), groups=256, in_channels=256, kernel_size=(3,3), out_channels=256, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_72 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_73 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_74 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_75 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=768, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_76 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_77 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_78 = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_79 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_80 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_81 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_82 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_84 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_85 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_86 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_87 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=256, kernel_size=(1,1), out_channels=256, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_88 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=768, kernel_size=(1,1), out_channels=512, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_89 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_90 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_91 = nn.Conv2d(bias=True, dilation=(1,1), groups=512, in_channels=512, kernel_size=(3,3), out_channels=512, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_92 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(3,3), out_channels=32, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_93 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(3,3), out_channels=64, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_94 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=512, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_95 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=32, kernel_size=(1,1), out_channels=32, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_96 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=64, kernel_size=(1,1), out_channels=64, padding=(0,0), padding_mode='zeros', stride=(1,1))
        self.conv2d_97 = nn.Conv2d(bias=True, dilation=(1,1), groups=128, in_channels=128, kernel_size=(3,3), out_channels=128, padding=(1,1), padding_mode='zeros', stride=(1,1))
        self.conv2d_98 = nn.Conv2d(bias=True, dilation=(1,1), groups=1, in_channels=128, kernel_size=(1,1), out_channels=128, padding=(0,0), padding_mode='zeros', stride=(1,1))

        archive = zipfile.ZipFile('yoloe_11s_seg_pnnx_rebuild.pnnx.bin', 'r')
        self.conv2d_1.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_1.bias', (32), 'float32')
        self.conv2d_1.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_1.weight', (32,3,3,3), 'float32')
        self.conv2d_2.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_2.bias', (64), 'float32')
        self.conv2d_2.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_2.weight', (64,32,3,3), 'float32')
        self.conv2d_3.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_3.bias', (64), 'float32')
        self.conv2d_3.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_3.weight', (64,64,1,1), 'float32')
        self.conv2d_4.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_4.bias', (16), 'float32')
        self.conv2d_4.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_4.weight', (16,32,3,3), 'float32')
        self.conv2d_5.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_5.bias', (32), 'float32')
        self.conv2d_5.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_5.weight', (32,16,3,3), 'float32')
        self.conv2d_6.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_6.bias', (128), 'float32')
        self.conv2d_6.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_6.weight', (128,96,1,1), 'float32')
        self.conv2d_7.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_7.bias', (128), 'float32')
        self.conv2d_7.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_7.weight', (128,128,3,3), 'float32')
        self.conv2d_8.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_8.bias', (128), 'float32')
        self.conv2d_8.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_8.weight', (128,128,1,1), 'float32')
        self.conv2d_9.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_9.bias', (32), 'float32')
        self.conv2d_9.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_9.weight', (32,64,3,3), 'float32')
        self.conv2d_10.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_10.bias', (64), 'float32')
        self.conv2d_10.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_10.weight', (64,32,3,3), 'float32')
        self.conv2d_11.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_11.bias', (256), 'float32')
        self.conv2d_11.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_11.weight', (256,192,1,1), 'float32')
        self.conv2d_12.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_12.bias', (256), 'float32')
        self.conv2d_12.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_12.weight', (256,256,3,3), 'float32')
        self.conv2d_13.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_13.bias', (256), 'float32')
        self.conv2d_13.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_13.weight', (256,256,1,1), 'float32')
        self.conv2d_14.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_14.bias', (64), 'float32')
        self.conv2d_14.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_14.weight', (64,128,1,1), 'float32')
        self.conv2d_15.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_15.bias', (64), 'float32')
        self.conv2d_15.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_15.weight', (64,128,1,1), 'float32')
        self.conv2d_16.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_16.bias', (64), 'float32')
        self.conv2d_16.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_16.weight', (64,64,3,3), 'float32')
        self.conv2d_17.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_17.bias', (64), 'float32')
        self.conv2d_17.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_17.weight', (64,64,3,3), 'float32')
        self.conv2d_18.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_18.bias', (64), 'float32')
        self.conv2d_18.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_18.weight', (64,64,3,3), 'float32')
        self.conv2d_19.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_19.bias', (64), 'float32')
        self.conv2d_19.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_19.weight', (64,64,3,3), 'float32')
        self.conv2d_20.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_20.bias', (128), 'float32')
        self.conv2d_20.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_20.weight', (128,128,1,1), 'float32')
        self.conv2d_21.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_21.bias', (256), 'float32')
        self.conv2d_21.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_21.weight', (256,384,1,1), 'float32')
        self.conv2d_22.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_22.bias', (512), 'float32')
        self.conv2d_22.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_22.weight', (512,256,3,3), 'float32')
        self.conv2d_23.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_23.bias', (512), 'float32')
        self.conv2d_23.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_23.weight', (512,512,1,1), 'float32')
        self.conv2d_24.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_24.bias', (128), 'float32')
        self.conv2d_24.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_24.weight', (128,256,1,1), 'float32')
        self.conv2d_25.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_25.bias', (128), 'float32')
        self.conv2d_25.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_25.weight', (128,256,1,1), 'float32')
        self.conv2d_26.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_26.bias', (128), 'float32')
        self.conv2d_26.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_26.weight', (128,128,3,3), 'float32')
        self.conv2d_27.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_27.bias', (128), 'float32')
        self.conv2d_27.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_27.weight', (128,128,3,3), 'float32')
        self.conv2d_28.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_28.bias', (128), 'float32')
        self.conv2d_28.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_28.weight', (128,128,3,3), 'float32')
        self.conv2d_29.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_29.bias', (128), 'float32')
        self.conv2d_29.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_29.weight', (128,128,3,3), 'float32')
        self.conv2d_30.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_30.bias', (256), 'float32')
        self.conv2d_30.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_30.weight', (256,256,1,1), 'float32')
        self.conv2d_31.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_31.bias', (512), 'float32')
        self.conv2d_31.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_31.weight', (512,768,1,1), 'float32')
        self.conv2d_32.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_32.bias', (256), 'float32')
        self.conv2d_32.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_32.weight', (256,512,1,1), 'float32')
        self.conv2d_33.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_33.bias', (512), 'float32')
        self.conv2d_33.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_33.weight', (512,1024,1,1), 'float32')
        self.conv2d_34.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_34.bias', (512), 'float32')
        self.conv2d_34.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_34.weight', (512,512,1,1), 'float32')
        self.conv2d_35.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_35.bias', (512), 'float32')
        self.conv2d_35.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_35.weight', (512,256,1,1), 'float32')
        self.conv2d_36.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_36.bias', (256), 'float32')
        self.conv2d_36.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_36.weight', (256,1,3,3), 'float32')
        self.conv2d_37.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_37.bias', (256), 'float32')
        self.conv2d_37.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_37.weight', (256,256,1,1), 'float32')
        self.conv2d_38.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_38.bias', (512), 'float32')
        self.conv2d_38.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_38.weight', (512,256,1,1), 'float32')
        self.conv2d_39.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_39.bias', (256), 'float32')
        self.conv2d_39.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_39.weight', (256,512,1,1), 'float32')
        self.conv2d_40.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_40.bias', (512), 'float32')
        self.conv2d_40.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_40.weight', (512,512,1,1), 'float32')
        self.conv2d_41.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_41.bias', (256), 'float32')
        self.conv2d_41.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_41.weight', (256,768,1,1), 'float32')
        self.conv2d_42.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_42.bias', (64), 'float32')
        self.conv2d_42.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_42.weight', (64,128,3,3), 'float32')
        self.conv2d_43.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_43.bias', (128), 'float32')
        self.conv2d_43.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_43.weight', (128,64,3,3), 'float32')
        self.conv2d_44.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_44.bias', (256), 'float32')
        self.conv2d_44.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_44.weight', (256,384,1,1), 'float32')
        self.conv2d_45.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_45.bias', (128), 'float32')
        self.conv2d_45.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_45.weight', (128,512,1,1), 'float32')
        self.conv2d_46.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_46.bias', (32), 'float32')
        self.conv2d_46.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_46.weight', (32,64,3,3), 'float32')
        self.conv2d_47.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_47.bias', (64), 'float32')
        self.conv2d_47.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_47.weight', (64,32,3,3), 'float32')
        self.conv2d_48.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_48.bias', (128), 'float32')
        self.conv2d_48.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_48.weight', (128,192,1,1), 'float32')
        self.conv2d_49.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_49.bias', (128), 'float32')
        self.conv2d_49.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_49.weight', (128,128,3,3), 'float32')
        self.conv2d_50.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_50.bias', (128), 'float32')
        self.conv2d_50.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_50.weight', (128,128,3,3), 'float32')
        self.conv2d_51.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_51.bias', (32), 'float32')
        self.conv2d_51.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_51.weight', (32,128,3,3), 'float32')
        self.conv2d_52.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_52.bias', (64), 'float32')
        self.conv2d_52.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_52.weight', (64,128,3,3), 'float32')
        self.conv2d_53.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_53.bias', (128), 'float32')
        self.conv2d_53.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_53.weight', (128,1,3,3), 'float32')
        self.conv_transpose2d_0.bias = self.load_pnnx_bin_as_parameter(archive, 'conv_transpose2d_0.bias', (128), 'float32')
        self.conv_transpose2d_0.weight = self.load_pnnx_bin_as_parameter(archive, 'conv_transpose2d_0.weight', (128,128,2,2), 'float32')
        self.conv2d_54.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_54.bias', (32), 'float32')
        self.conv2d_54.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_54.weight', (32,32,3,3), 'float32')
        self.conv2d_55.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_55.bias', (64), 'float32')
        self.conv2d_55.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_55.weight', (64,64,3,3), 'float32')
        self.conv2d_56.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_56.bias', (128), 'float32')
        self.conv2d_56.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_56.weight', (128,128,1,1), 'float32')
        self.conv2d_57.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_57.bias', (256), 'float32')
        self.conv2d_57.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_57.weight', (256,384,1,1), 'float32')
        self.conv2d_58.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_58.bias', (128), 'float32')
        self.conv2d_58.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_58.weight', (128,128,3,3), 'float32')
        self.conv2d_59.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_59.bias', (32), 'float32')
        self.conv2d_59.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_59.weight', (32,32,1,1), 'float32')
        self.conv2d_60.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_60.bias', (64), 'float32')
        self.conv2d_60.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_60.weight', (64,64,1,1), 'float32')
        self.conv2d_61.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_61.bias', (128), 'float32')
        self.conv2d_61.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_61.weight', (128,1,3,3), 'float32')
        self.conv2d_62.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_62.bias', (32), 'float32')
        self.conv2d_62.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_62.weight', (32,128,1,1), 'float32')
        self.conv2d_63.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_63.bias', (64), 'float32')
        self.conv2d_63.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_63.weight', (64,128,3,3), 'float32')
        self.conv2d_64.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_64.bias', (128), 'float32')
        self.conv2d_64.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_64.weight', (128,128,1,1), 'float32')
        self.conv2d_65.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_65.bias', (128), 'float32')
        self.conv2d_65.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_65.weight', (128,64,3,3), 'float32')
        self.conv2d_67.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_67.bias', (256), 'float32')
        self.conv2d_67.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_67.weight', (256,384,1,1), 'float32')
        self.conv2d_68.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_68.bias', (256), 'float32')
        self.conv2d_68.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_68.weight', (256,256,3,3), 'float32')
        self.conv2d_69.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_69.bias', (32), 'float32')
        self.conv2d_69.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_69.weight', (32,256,3,3), 'float32')
        self.conv2d_70.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_70.bias', (64), 'float32')
        self.conv2d_70.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_70.weight', (64,256,3,3), 'float32')
        self.conv2d_71.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_71.bias', (256), 'float32')
        self.conv2d_71.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_71.weight', (256,1,3,3), 'float32')
        self.conv2d_72.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_72.bias', (32), 'float32')
        self.conv2d_72.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_72.weight', (32,32,3,3), 'float32')
        self.conv2d_73.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_73.bias', (64), 'float32')
        self.conv2d_73.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_73.weight', (64,64,3,3), 'float32')
        self.conv2d_74.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_74.bias', (128), 'float32')
        self.conv2d_74.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_74.weight', (128,256,1,1), 'float32')
        self.conv2d_75.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_75.bias', (512), 'float32')
        self.conv2d_75.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_75.weight', (512,768,1,1), 'float32')
        self.conv2d_76.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_76.bias', (32), 'float32')
        self.conv2d_76.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_76.weight', (32,32,1,1), 'float32')
        self.conv2d_77.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_77.bias', (64), 'float32')
        self.conv2d_77.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_77.weight', (64,64,1,1), 'float32')
        self.conv2d_78.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_78.bias', (128), 'float32')
        self.conv2d_78.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_78.weight', (128,1,3,3), 'float32')
        self.conv2d_79.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_79.bias', (128), 'float32')
        self.conv2d_79.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_79.weight', (128,256,1,1), 'float32')
        self.conv2d_80.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_80.bias', (128), 'float32')
        self.conv2d_80.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_80.weight', (128,256,1,1), 'float32')
        self.conv2d_81.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_81.bias', (128), 'float32')
        self.conv2d_81.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_81.weight', (128,128,1,1), 'float32')
        self.conv2d_82.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_82.bias', (128), 'float32')
        self.conv2d_82.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_82.weight', (128,128,3,3), 'float32')
        self.conv2d_84.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_84.bias', (128), 'float32')
        self.conv2d_84.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_84.weight', (128,128,3,3), 'float32')
        self.conv2d_85.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_85.bias', (128), 'float32')
        self.conv2d_85.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_85.weight', (128,128,3,3), 'float32')
        self.conv2d_86.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_86.bias', (128), 'float32')
        self.conv2d_86.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_86.weight', (128,128,3,3), 'float32')
        self.conv2d_87.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_87.bias', (256), 'float32')
        self.conv2d_87.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_87.weight', (256,256,1,1), 'float32')
        self.conv2d_88.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_88.bias', (512), 'float32')
        self.conv2d_88.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_88.weight', (512,768,1,1), 'float32')
        self.conv2d_89.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_89.bias', (32), 'float32')
        self.conv2d_89.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_89.weight', (32,512,3,3), 'float32')
        self.conv2d_90.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_90.bias', (64), 'float32')
        self.conv2d_90.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_90.weight', (64,512,3,3), 'float32')
        self.conv2d_91.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_91.bias', (512), 'float32')
        self.conv2d_91.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_91.weight', (512,1,3,3), 'float32')
        self.conv2d_92.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_92.bias', (32), 'float32')
        self.conv2d_92.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_92.weight', (32,32,3,3), 'float32')
        self.conv2d_93.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_93.bias', (64), 'float32')
        self.conv2d_93.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_93.weight', (64,64,3,3), 'float32')
        self.conv2d_94.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_94.bias', (128), 'float32')
        self.conv2d_94.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_94.weight', (128,512,1,1), 'float32')
        self.conv2d_95.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_95.bias', (32), 'float32')
        self.conv2d_95.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_95.weight', (32,32,1,1), 'float32')
        self.conv2d_96.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_96.bias', (64), 'float32')
        self.conv2d_96.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_96.weight', (64,64,1,1), 'float32')
        self.conv2d_97.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_97.bias', (128), 'float32')
        self.conv2d_97.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_97.weight', (128,1,3,3), 'float32')
        self.conv2d_98.bias = self.load_pnnx_bin_as_parameter(archive, 'conv2d_98.bias', (128), 'float32')
        self.conv2d_98.weight = self.load_pnnx_bin_as_parameter(archive, 'conv2d_98.weight', (128,128,1,1), 'float32')
        archive.close()

    def load_pnnx_bin_as_parameter(self, archive, key, shape, dtype, requires_grad=True):
        return nn.Parameter(self.load_pnnx_bin_as_tensor(archive, key, shape, dtype), requires_grad)

    def load_pnnx_bin_as_tensor(self, archive, key, shape, dtype):
        fd, tmppath = tempfile.mkstemp()
        with os.fdopen(fd, 'wb') as tmpf, archive.open(key) as keyfile:
            tmpf.write(keyfile.read())
        m = np.memmap(tmppath, dtype=dtype, mode='r', shape=shape).copy()
        os.remove(tmppath)
        return torch.from_numpy(m)

    def forward(self, v_0, v_1, v_2, v_3, v_4, v_5, v_6):
        v_7 = self.conv2d_1(v_0)
        v_8 = F.silu(input=v_7)
        v_9 = self.conv2d_2(v_8)
        v_10 = F.silu(input=v_9)
        v_11 = self.conv2d_3(v_10)
        v_12 = F.silu(input=v_11)
        v_13, v_14 = torch.split(tensor=v_12, dim=1, split_size_or_sections=(32,32))
        v_15 = self.conv2d_4(v_14)
        v_16 = F.silu(input=v_15)
        v_17 = self.conv2d_5(v_16)
        v_18 = F.sigmoid(input=v_17)
        v_19 = (v_14 + (v_17 * v_18))
        v_20 = torch.cat((v_13, v_14, v_19), dim=1)
        v_21 = self.conv2d_6(v_20)
        v_22 = F.silu(input=v_21)
        v_23 = self.conv2d_7(v_22)
        v_24 = F.silu(input=v_23)
        v_25 = self.conv2d_8(v_24)
        v_26 = F.silu(input=v_25)
        v_27, v_28 = torch.split(tensor=v_26, dim=1, split_size_or_sections=(64,64))
        v_29 = self.conv2d_9(v_28)
        v_30 = F.silu(input=v_29)
        v_31 = self.conv2d_10(v_30)
        v_32 = F.sigmoid(input=v_31)
        v_33 = (v_28 + (v_31 * v_32))
        v_34 = torch.cat((v_27, v_28, v_33), dim=1)
        v_35 = self.conv2d_11(v_34)
        v_36 = F.silu(input=v_35)
        v_37 = self.conv2d_12(v_36)
        v_38 = F.silu(input=v_37)
        v_39 = self.conv2d_13(v_38)
        v_40 = F.silu(input=v_39)
        v_41, v_42 = torch.split(tensor=v_40, dim=1, split_size_or_sections=(128,128))
        v_43 = self.conv2d_14(v_42)
        v_44 = self.conv2d_15(v_42)
        v_45 = F.silu(input=v_43)
        v_46 = F.silu(input=v_44)
        v_47 = self.conv2d_16(v_45)
        v_48 = F.silu(input=v_47)
        v_49 = self.conv2d_17(v_48)
        v_50 = F.sigmoid(input=v_49)
        v_51 = (v_45 + (v_49 * v_50))
        v_52 = self.conv2d_18(v_51)
        v_53 = F.silu(input=v_52)
        v_54 = self.conv2d_19(v_53)
        v_55 = F.sigmoid(input=v_54)
        v_56 = (v_51 + (v_54 * v_55))
        v_57 = torch.cat((v_56, v_46), dim=1)
        v_58 = self.conv2d_20(v_57)
        v_59 = F.silu(input=v_58)
        v_60 = torch.cat((v_41, v_42, v_59), dim=1)
        v_61 = self.conv2d_21(v_60)
        v_62 = F.silu(input=v_61)
        v_63 = self.conv2d_22(v_62)
        v_64 = F.silu(input=v_63)
        v_65 = self.conv2d_23(v_64)
        v_66 = F.silu(input=v_65)
        v_67, v_68 = torch.split(tensor=v_66, dim=1, split_size_or_sections=(256,256))
        v_69 = self.conv2d_24(v_68)
        v_70 = self.conv2d_25(v_68)
        v_71 = F.silu(input=v_69)
        v_72 = F.silu(input=v_70)
        v_73 = self.conv2d_26(v_71)
        v_74 = F.silu(input=v_73)
        v_75 = self.conv2d_27(v_74)
        v_76 = F.sigmoid(input=v_75)
        v_77 = (v_71 + (v_75 * v_76))
        v_78 = self.conv2d_28(v_77)
        v_79 = F.silu(input=v_78)
        v_80 = self.conv2d_29(v_79)
        v_81 = F.sigmoid(input=v_80)
        v_82 = (v_77 + (v_80 * v_81))
        v_83 = torch.cat((v_82, v_72), dim=1)
        v_84 = self.conv2d_30(v_83)
        v_85 = F.silu(input=v_84)
        v_86 = torch.cat((v_67, v_68, v_85), dim=1)
        v_87 = self.conv2d_31(v_86)
        v_88 = F.silu(input=v_87)
        v_89 = self.conv2d_32(v_88)
        v_90 = F.silu(input=v_89)
        v_91 = F.max_pool2d(input=v_90, ceil_mode=False, dilation=(1,1), kernel_size=(5,5), padding=(2,2), return_indices=False, stride=(1,1))
        v_92 = F.max_pool2d(input=v_91, ceil_mode=False, dilation=(1,1), kernel_size=(5,5), padding=(2,2), return_indices=False, stride=(1,1))
        v_93 = F.max_pool2d(input=v_92, ceil_mode=False, dilation=(1,1), kernel_size=(5,5), padding=(2,2), return_indices=False, stride=(1,1))
        v_94 = torch.cat((v_90, v_91, v_92, v_93), dim=1)
        v_95 = self.conv2d_33(v_94)
        v_96 = F.silu(input=v_95)
        v_97 = self.conv2d_34(v_96)
        v_98 = F.silu(input=v_97)
        v_99, v_100 = torch.split(tensor=v_98, dim=1, split_size_or_sections=(256,256))
        v_101 = self.conv2d_35(v_100)
        v_102 = v_101.reshape(1, 4, 128, -1)
        v_103, v_104, v_105 = torch.split(tensor=v_102, dim=2, split_size_or_sections=(32,32,64))
        v_106 = v_103.permute(dims=(0,1,3,2))
        v_107 = [1, 256, v_101.size(2), v_101.size(3)]
        v_108 = v_105.reshape(*v_107)
        v_109 = torch.matmul(input=v_106, other=v_104)
        v_110 = self.conv2d_36(v_108)
        v_111 = (v_109 * 0.176777)
        v_112 = F.softmax(input=v_111, dim=-1)
        v_113 = v_112.permute(dims=(0,1,3,2))
        v_114 = torch.matmul(input=v_105, other=v_113)
        v_115 = v_114.reshape(*v_107)
        v_116 = (v_115 + v_110)
        v_117 = self.conv2d_37(v_116)
        v_118 = (v_100 + v_117)
        v_119 = self.conv2d_38(v_118)
        v_120 = F.silu(input=v_119)
        v_121 = self.conv2d_39(v_120)
        v_122 = (v_118 + v_121)
        v_123 = torch.cat((v_99, v_122), dim=1)
        v_124 = self.conv2d_40(v_123)
        v_125 = F.silu(input=v_124)
        v_126 = F.upsample_nearest(input=v_125, scale_factor=(2.0,2.0))
        v_127 = torch.cat((v_126, v_62), dim=1)
        v_128 = self.conv2d_41(v_127)
        v_129 = F.silu(input=v_128)
        v_130, v_131 = torch.split(tensor=v_129, dim=1, split_size_or_sections=(128,128))
        v_132 = self.conv2d_42(v_131)
        v_133 = F.silu(input=v_132)
        v_134 = self.conv2d_43(v_133)
        v_135 = F.sigmoid(input=v_134)
        v_136 = (v_131 + (v_134 * v_135))
        v_137 = torch.cat((v_130, v_131, v_136), dim=1)
        v_138 = self.conv2d_44(v_137)
        v_139 = F.silu(input=v_138)
        v_140 = F.upsample_nearest(input=v_139, scale_factor=(2.0,2.0))
        v_141 = torch.cat((v_140, v_36), dim=1)
        v_142 = self.conv2d_45(v_141)
        v_143 = F.silu(input=v_142)
        v_144, v_145 = torch.split(tensor=v_143, dim=1, split_size_or_sections=(64,64))
        v_146 = self.conv2d_46(v_145)
        v_147 = F.silu(input=v_146)
        v_148 = self.conv2d_47(v_147)
        v_149 = F.sigmoid(input=v_148)
        v_150 = (v_145 + (v_148 * v_149))
        v_151 = torch.cat((v_144, v_145, v_150), dim=1)
        v_152 = self.conv2d_48(v_151)
        v_153 = F.silu(input=v_152)
        v_154 = self.conv2d_49(v_153)
        v_155 = self.conv2d_50(v_153)
        v_156 = self.conv2d_51(v_153)
        v_157 = self.conv2d_52(v_153)
        v_158 = self.conv2d_53(v_153)
        v_159 = F.silu(input=v_154)
        v_160 = F.silu(input=v_155)
        v_161 = F.silu(input=v_156)
        v_162 = F.silu(input=v_157)
        v_163 = F.silu(input=v_158)
        v_164 = torch.cat((v_159, v_139), dim=1)
        v_165 = self.conv_transpose2d_0(v_160)
        v_166 = self.conv2d_54(v_161)
        v_167 = self.conv2d_55(v_162)
        v_168 = self.conv2d_56(v_163)
        v_169 = self.conv2d_57(v_164)
        v_170 = self.conv2d_58(v_165)
        v_171 = F.silu(input=v_166)
        v_172 = F.silu(input=v_167)
        v_173 = F.silu(input=v_168)
        v_174 = F.silu(input=v_169)
        v_175 = F.silu(input=v_170)
        v_176 = self.conv2d_59(v_171)
        v_177 = self.conv2d_60(v_172)
        v_178 = self.conv2d_61(v_173)
        v_179, v_180 = torch.split(tensor=v_174, dim=1, split_size_or_sections=(128,128))
        v_181 = self.conv2d_62(v_175)
        v_182 = torch.flatten(input=v_176, end_dim=-1, start_dim=2)
        v_183 = torch.transpose(input=v_182, dim0=1, dim1=2)
        v_184 = self.conv2d_63(v_180)
        v_185 = F.silu(input=v_178)
        v_186 = F.silu(input=v_181)
        v_187 = self.conv2d_64(v_185)
        v_188 = F.silu(input=v_184)
        v_189 = self.conv2d_65(v_188)
        v_190 = F.silu(input=v_187)
        v_191 = F.sigmoid(input=v_189)
        v_192 = F.conv2d(input=v_190, weight=v_1, bias=v_2, dilation=(1,1), groups=1, padding=(0,0), stride=(1,1))
        v_193 = torch.cat((v_177, v_192), dim=1)
        v_194 = (v_180 + (v_189 * v_191))
        v_195 = [1, v_193.size(1), -1]
        v_196 = v_193.reshape(*v_195)
        v_197 = torch.transpose(input=v_196, dim0=1, dim1=2)
        v_198 = torch.cat((v_179, v_180, v_194), dim=1)
        v_199 = self.conv2d_67(v_198)
        v_200 = F.silu(input=v_199)
        v_201 = self.conv2d_68(v_200)
        v_202 = self.conv2d_69(v_200)
        v_203 = self.conv2d_70(v_200)
        v_204 = self.conv2d_71(v_200)
        v_205 = F.silu(input=v_201)
        v_206 = F.silu(input=v_202)
        v_207 = F.silu(input=v_203)
        v_208 = F.silu(input=v_204)
        v_209 = torch.cat((v_205, v_125), dim=1)
        v_210 = self.conv2d_72(v_206)
        v_211 = self.conv2d_73(v_207)
        v_212 = self.conv2d_74(v_208)
        v_213 = self.conv2d_75(v_209)
        v_214 = F.silu(input=v_210)
        v_215 = F.silu(input=v_211)
        v_216 = F.silu(input=v_212)
        v_217 = F.silu(input=v_213)
        v_218 = self.conv2d_76(v_214)
        v_219 = self.conv2d_77(v_215)
        v_220 = self.conv2d_78(v_216)
        v_221, v_222 = torch.split(tensor=v_217, dim=1, split_size_or_sections=(256,256))
        v_223 = torch.flatten(input=v_218, end_dim=-1, start_dim=2)
        v_224 = torch.transpose(input=v_223, dim0=1, dim1=2)
        v_225 = self.conv2d_79(v_222)
        v_226 = self.conv2d_80(v_222)
        v_227 = F.silu(input=v_220)
        v_228 = self.conv2d_81(v_227)
        v_229 = F.silu(input=v_225)
        v_230 = F.silu(input=v_226)
        v_231 = self.conv2d_82(v_229)
        v_232 = F.silu(input=v_228)
        v_233 = F.conv2d(input=v_232, weight=v_3, bias=v_4, dilation=(1,1), groups=1, padding=(0,0), stride=(1,1))
        v_234 = F.silu(input=v_231)
        v_235 = torch.cat((v_219, v_233), dim=1)
        v_236 = self.conv2d_84(v_234)
        v_237 = [1, v_235.size(1), -1]
        v_238 = v_235.reshape(*v_237)
        v_239 = torch.transpose(input=v_238, dim0=1, dim1=2)
        v_240 = F.sigmoid(input=v_236)
        v_241 = (v_229 + (v_236 * v_240))
        v_242 = self.conv2d_85(v_241)
        v_243 = F.silu(input=v_242)
        v_244 = self.conv2d_86(v_243)
        v_245 = F.sigmoid(input=v_244)
        v_246 = (v_241 + (v_244 * v_245))
        v_247 = torch.cat((v_246, v_230), dim=1)
        v_248 = self.conv2d_87(v_247)
        v_249 = F.silu(input=v_248)
        v_250 = torch.cat((v_221, v_222, v_249), dim=1)
        v_251 = self.conv2d_88(v_250)
        v_252 = F.silu(input=v_251)
        v_253 = self.conv2d_89(v_252)
        v_254 = self.conv2d_90(v_252)
        v_255 = self.conv2d_91(v_252)
        v_256 = F.silu(input=v_253)
        v_257 = F.silu(input=v_254)
        v_258 = F.silu(input=v_255)
        v_259 = self.conv2d_92(v_256)
        v_260 = self.conv2d_93(v_257)
        v_261 = self.conv2d_94(v_258)
        v_262 = F.silu(input=v_259)
        v_263 = F.silu(input=v_260)
        v_264 = F.silu(input=v_261)
        v_265 = self.conv2d_95(v_262)
        v_266 = self.conv2d_96(v_263)
        v_267 = self.conv2d_97(v_264)
        v_268 = torch.flatten(input=v_265, end_dim=-1, start_dim=2)
        v_269 = torch.transpose(input=v_268, dim0=1, dim1=2)
        v_270 = torch.cat((v_183, v_224, v_269), dim=1)
        v_271 = F.silu(input=v_267)
        v_272 = self.conv2d_98(v_271)
        v_273 = F.silu(input=v_272)
        v_274 = F.conv2d(input=v_273, weight=v_5, bias=v_6, dilation=(1,1), groups=1, padding=(0,0), stride=(1,1))
        v_275 = torch.cat((v_266, v_274), dim=1)
        v_276 = [1, v_275.size(1), -1]
        v_277 = v_275.reshape(*v_276)
        v_278 = torch.transpose(input=v_277, dim0=1, dim1=2)
        v_279 = torch.cat((v_197, v_239, v_278), dim=1)
        v_280 = (v_279, v_270, v_186, )
        return v_280

def export_torchscript():
    net = Model()
    net.float()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, -1, -1, dtype=torch.float)
    v_1 = torch.rand(-1, 128, 1, 1, dtype=torch.float)
    v_2 = torch.rand(-1, dtype=torch.float)
    v_3 = torch.rand(-1, 128, 1, 1, dtype=torch.float)
    v_4 = torch.rand(-1, dtype=torch.float)
    v_5 = torch.rand(-1, 128, 1, 1, dtype=torch.float)
    v_6 = torch.rand(-1, dtype=torch.float)

    mod = torch.jit.trace(net, (v_0, v_1, v_2, v_3, v_4, v_5, v_6))
    mod.save("yoloe_11s_seg_pnnx_rebuild_pnnx.py.pt")

def export_onnx():
    net = Model()
    net.float()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, -1, -1, dtype=torch.float)
    v_1 = torch.rand(-1, 128, 1, 1, dtype=torch.float)
    v_2 = torch.rand(-1, dtype=torch.float)
    v_3 = torch.rand(-1, 128, 1, 1, dtype=torch.float)
    v_4 = torch.rand(-1, dtype=torch.float)
    v_5 = torch.rand(-1, 128, 1, 1, dtype=torch.float)
    v_6 = torch.rand(-1, dtype=torch.float)

    torch.onnx.export(net, (v_0, v_1, v_2, v_3, v_4, v_5, v_6), "yoloe_11s_seg_pnnx_rebuild_pnnx.py.onnx", export_params=True, operator_export_type=torch.onnx.OperatorExportTypes.ONNX_ATEN_FALLBACK, opset_version=13, input_names=['in0', 'in1', 'in2', 'in3', 'in4', 'in5', 'in6'], output_names=['out0'])

@torch.no_grad()
def test_inference():
    net = Model()
    net.float()
    net.eval()

    torch.manual_seed(0)
    v_0 = torch.rand(1, 3, 640, 640, dtype=torch.float)
    v_1 = torch.rand(1, 128, 1, 1, dtype=torch.float)
    v_2 = torch.rand(1, dtype=torch.float)
    v_3 = torch.rand(1, 128, 1, 1, dtype=torch.float)
    v_4 = torch.rand(1, dtype=torch.float)
    v_5 = torch.rand(1, 128, 1, 1, dtype=torch.float)
    v_6 = torch.rand(1, dtype=torch.float)

    return net(v_0, v_1, v_2, v_3, v_4, v_5, v_6)

if __name__ == "__main__":
    print(test_inference())
